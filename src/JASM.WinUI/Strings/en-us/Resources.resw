<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppDisplayName" xml:space="preserve">
    <value>JASM - Just Another Skin Manager</value>
  </data>
  <data name="AppDescription" xml:space="preserve">
    <value>JASM - Just Another Skin Manager</value>
  </data>
  <data name="Startup1.Text" xml:space="preserve">
    <value>As part of the first time setup you will need to select a Model-Importer folder (3dmigoto) and its connected Mods folder. The 3dmigoto folder contains 3DMigoto Loader.exe/3DMigotoLoader.exe and a Mods folder. If you have not set up the model importer yet, please do so now, see link below. I find most mods on Gamebanana but Nexusmods also has some.</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="Startup2.Text" xml:space="preserve">
    <value>Once the settings are saved the application will create a folder for each character within the 'Mods' folder. Mod folders outside of these character folders are ignored. This application enables and disables mods by prefixing mod folders with 'DISABLED_'.  JASM also supports exporting Mods managed by it if you wish to use them with other applications.</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="Startup3.Text" xml:space="preserve">
    <value>It is always a good idea to backup your files/mods before using applications that interact with your files</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="ShellMenuItem_Views_Main.Text" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="Main_Title.Text" xml:space="preserve">
    <value>Main</value>
    <comment>Page title for MainPage</comment>
  </data>
  <data name="ShellMenuItem_Views_Startup.Text" xml:space="preserve">
    <value>Startup</value>
  </data>
  <data name="Startup_Title.Text" xml:space="preserve">
    <value>First time startup</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="Settings_Personalization.Text" xml:space="preserve">
    <value>Personalization</value>
  </data>
  <data name="Settings_Theme.Text" xml:space="preserve">
    <value>Theme</value>
  </data>
  <data name="Settings_Theme_Light.Content" xml:space="preserve">
    <value>Light</value>
  </data>
  <data name="Settings_Theme_Dark.Content" xml:space="preserve">
    <value>Dark</value>
  </data>
  <data name="Settings_Theme_Default.Content" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="Settings_AboutDescription.Text" xml:space="preserve">
    <value>The goal of JASM is to make it easy to organize a larger amount of skin mods</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="SettingsPage_PrivacyTermsLink.Content" xml:space="preserve">
    <value>Privacy Statement</value>
  </data>
  <data name="SettingsPage_PrivacyTermsLink.NavigateUri" xml:space="preserve">
    <value>https://YourPrivacyUrlGoesHere/</value>
  </data>
  <data name="ShellMenuBarSettingsButton.[using:Microsoft.UI.Xaml.Automation]AutomationProperties.Name" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Settings_Title.Text" xml:space="preserve">
    <value>Settings</value>
    <comment>Page title for SettingsPage</comment>
  </data>
  <data name="Startup/Tooltip1.Text" xml:space="preserve">
    <value>Enabling this option will prompt the application to sort existing mods into folders assigned to their respective characters. Any mods that can't be reasonably matched will be placed in an 'Others' folder.</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="Startup/Tooltip2.Text" xml:space="preserve">
    <value>A mod folder containing multiple character names may be wrongly moved to a character's directory. This assumes a flat mod structure, where skin folders are loosely stored in the mods folder. If you have a custom folder structure, there is a high chance that JASM will incorrectly identify your skins. This also the case if you have nested folders with skins inside of them.</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="Startup/Tooltip3.Text" xml:space="preserve">
    <value>This can be activated later in the settings page.</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="Settings_About.Text" xml:space="preserve">
    <value>About this application</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="Settings_ComboBox_Header.Text" xml:space="preserve">
    <value>Select Display Language:</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="Settings_ExportDialog.Text" xml:space="preserve">
    <value>This will export all mods that JASM is managing to a an export folder of your choice. The mods will be copied to the export folder and will not be removed from the original folder.</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="Settings_ExportDialogButtons.CloseButtonText" xml:space="preserve">
    <value>Cancel</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="Settings_ExportDialogButtons.PrimaryButtonText" xml:space="preserve">
    <value>Export</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="Settings_ExportDialog_ChangeStatus.Text" xml:space="preserve">
    <value>Change status of exported mods</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="Settings_ExportDialog_KeepStructure.Text" xml:space="preserve">
    <value>Keep folder structure of CharacterName/Mods in export folder</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="Settings_ExportDialog_RemoveJasm.Text" xml:space="preserve">
    <value>Removes JASM configuration files from the exported Mods</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="Settings_Export_Button.Text" xml:space="preserve">
    <value>Export Mods</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="Settings_Export_Title.Text" xml:space="preserve">
    <value>Export/Backup Mods</value>
    <comment>[No longer in use]</comment>
  </data>
  <data name="Settings_Language.Text" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="Settings_Language_TexBlock.Text" xml:space="preserve">
    <value>Language options are currently limited. It is a work in progress.</value>
  </data>
</root>