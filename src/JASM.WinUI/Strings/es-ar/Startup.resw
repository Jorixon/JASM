<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BackupWarning.Text" xml:space="preserve">
    <value>Siempre es recomendable hacer copias de seguridad de tus archivos/mods antes de usar aplicaciones que interactúan con tus archivos.</value>
  </data>
  <data name="Body1.Text" xml:space="preserve">
    <value>Como parte de la configuración inicial, necesitarás seleccionar la carpeta del importador de modelos (3dmigoto) y la carpeta de mods asociada. La carpeta 3dmigoto contiene 3DMigoto Loader.exe/3DMigotoLoader.exe y la carpeta de mods. Si aún no has configurado el importador de modelos, por favor, hazlo ahora utilizando el enlace a continuación. La mayoría de los mods los encuentro en Gamebanana, pero también se pueden usar Nexusmods.</value>
  </data>
  <data name="Body2.Text" xml:space="preserve">
    <value>Después de guardar la configuración, la aplicación creará una carpeta para cada personaje dentro de la carpeta 'Mods'. Las carpetas de mods que se encuentran fuera de estas carpetas de personajes se ignoran. Esta aplicación habilita y deshabilita los mods agregando el prefijo 'DISABLED_' a las carpetas de mods. JASM también admite la exportación de mods gestionados por él, si deseas usarlos con otras aplicaciones.</value>
  </data>
  <data name="DisableModsTooltip.Text" xml:space="preserve">
    <value>Agrega el prefijo DISABLED_ a todos los mods para que se desactiven</value>
  </data>
  <data name="GameSelectorBox.ToolTipService.ToolTip" xml:space="preserve">
    <value>Selecciona el juego para el que deseas gestionar los mods. Esto se puede cambiar en cualquier momento en la página de configuración.</value>
  </data>
  <data name="ReorganizeTooltip1.Text" xml:space="preserve">
    <value>Habilitar esta opción hará que la aplicación ordene los mods existentes en carpetas asignadas a los personajes correspondientes. Cualquier mod que no pueda asociarse razonablemente se colocará en la carpeta "Otros".</value>
  </data>
  <data name="ReorganizeTooltip2.Text" xml:space="preserve">
    <value>Una carpeta de mods que contiene nombres de varios personajes puede moverse incorrectamente al directorio de uno de los personajes. Esto asume una estructura plana de mods, donde las carpetas de skins se almacenan libremente en la carpeta de mods. Si tienes tu propia estructura de carpetas, es muy probable que JASM no identifique correctamente tus skins. Esto también se aplica si tienes carpetas anidadas con skins dentro de ellas.</value>
  </data>
  <data name="ReorganizeTooltip3.Text" xml:space="preserve">
    <value>Esto se puede activar más tarde en la página de configuración</value>
  </data>
  <data name="Startup_Header.Text" xml:space="preserve">
    <value>Inicio de la aplicación</value>
  </data>
</root>
