<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppDisplayName" xml:space="preserve">
    <value>JASM - Just Another Skin Manager</value>
  </data>
  <data name="AppDescription" xml:space="preserve">
    <value>JASM - Just Another Skin Manager</value>
  </data>
  <data name="Startup1.Text" xml:space="preserve">
    <value>作为首次设置的一部分，您需要选择原神模型导入器（GIMI）文件夹及其关联的模组文件夹。GIMI/3dmigoto文件夹包含3DMigoto Loader.exe和一个模组文件夹。如果您尚未设置GIMI，请立即执行此操作，请参见下面的链接。我发现大多数模组在Gamebanana上，但Nexusmods也有一些。</value>
  </data>
  <data name="Startup2.Text" xml:space="preserve">
    <value>保存设置后，应用程序将在模组文件夹内为每个角色创建一个模组文件夹。该应用程序通过在模组文件夹前缀中添加“DISABLED_”来启用和禁用模组。JASM还支持导出由其管理的模组，如果您希望将其与其他应用程序一起使用。目前，只有这个页面和部分设置页面已经翻译完成。翻译是通过ChatGPT进行的，可能包含错误。</value>
  </data>
  <data name="Startup3.Text" xml:space="preserve">
    <value>在使用与您的文件交互的应用程序之前，备份您的文件/模组总是一个好主意。</value>
  </data>
  <data name="Startup/Tooltip1.Text" xml:space="preserve">
    <value>启用此选项将提示应用程序将现有的模组按其各自角色分配的文件夹进行排序。任何无法合理匹配的模组将放入“其他”文件夹。</value>
  </data>
  <data name="Startup/Tooltip2.Text" xml:space="preserve">
    <value>一个包含多个角色名称的模组文件夹可能会错误地移到一个角色的目录中。</value>
  </data>
  <data name="Startup/Tooltip3.Text" xml:space="preserve">
    <value>这可以在设置页面中稍后激活。</value>
  </data>
  <data name="Startup_Title.Text" xml:space="preserve">
    <value>首次启动</value>
    <comment>启动页面的页面标题</comment>
  </data>
  <data name="Settings_About.Text" xml:space="preserve">
    <value>关于此应用程序</value>
  </data>
  <data name="Settings_AboutDescription.Text" xml:space="preserve">
    <value>JASM的目标是使组织大量皮肤模组变得更容易</value>
  </data>
  <data name="Settings_ComboBox_Header.Text" xml:space="preserve">
    <value>选择显示语言：</value>
  </data>
  <data name="Settings_Language_TexBlock.Text" xml:space="preserve">
    <value>语言选项目前有限。这是一个正在进行中的工作。这是由ChatGPT翻译的。</value>
  </data>
  <data name="Settings_Personalization.Text" xml:space="preserve">
    <value>个性化</value>
  </data>
  <data name="Settings_Theme.Text" xml:space="preserve">
    <value>主题</value>
  </data>
  <data name="Settings_Theme_Dark.Content" xml:space="preserve">
    <value>深色</value>
  </data>
  <data name="Settings_Theme_Default.Content" xml:space="preserve">
    <value>默认</value>
  </data>
  <data name="Settings_Theme_Light.Content" xml:space="preserve">
    <value>浅色</value>
  </data>
  <data name="Settings_Title.Text" xml:space="preserve">
    <value>设置</value>
    <comment>设置页面的页面标题</comment>
  </data>
  <data name="Settings_ExportDialog.Text" xml:space="preserve">
    <value>这将导出JASM管理的所有模组到您选择的导出文件夹。模组将被复制到导出文件夹，而不会从原始文件夹中删除。</value>
  </data>
  <data name="Settings_ExportDialogButtons.CloseButtonText" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="Settings_ExportDialogButtons.PrimaryButtonText" xml:space="preserve">
    <value>导出</value>
  </data>
  <data name="Settings_ExportDialog_ChangeStatus.Text" xml:space="preserve">
    <value>更改导出的模组状态</value>
  </data>
  <data name="Settings_ExportDialog_KeepStructure.Text" xml:space="preserve">
    <value>在导出文件夹中保留CharacterName/Mods的文件夹结构</value>
  </data>
  <data name="Settings_ExportDialog_RemoveJasm.Text" xml:space="preserve">
    <value>从导出的模组中移除JASM配置文件</value>
  </data>
  <data name="Settings_Export_Button.Text" xml:space="preserve">
    <value>导出模组</value>
  </data>
  <data name="Settings_Export_Title.Text" xml:space="preserve">
    <value>导出/备份模组</value>
  </data>
  <data name="Settings_Language.Text" xml:space="preserve">
    <value>语言</value>
  </data>
  <data name="Stopped" xml:space="preserve">
    <value>停止</value>
  </data>
  <data name="Waiting" xml:space="preserve">
    <value>等待</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>错误</value>
  </data>
  <data name="Running" xml:space="preserve">
    <value>运行中</value>
  </data>
</root>