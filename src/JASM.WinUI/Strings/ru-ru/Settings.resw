<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="3dmigotoFolderSelector.Title" xml:space="preserve">
    <value>Папка 3dMigoto</value>
  </data>
  <data name="ChangeLanguageDialogText" xml:space="preserve">
    <value>Изменение языка требует перезапуска приложения.
Это необходимо для корректной настройки приложения для выбранного языка.
Хотите изменить язык?</value>
  </data>
  <data name="ElevatorSectionHeader.Text" xml:space="preserve">
    <value>Процесс Синхронизации</value>
  </data>
  <data name="ElevatorStatusTitle.Text" xml:space="preserve">
    <value>Статус синхронизации</value>
  </data>
  <data name="FolderSectionHeader.Text" xml:space="preserve">
    <value>Папки</value>
  </data>
  <data name="GameSelectorComboBox.Header" xml:space="preserve">
    <value>Выберите Игру:</value>
  </data>
  <data name="GameSelectorSectionHeader.Text" xml:space="preserve">
    <value>Игра</value>
  </data>
  <data name="GameSelectorTitle.Text" xml:space="preserve">
    <value>JASM поддерживает Genshin Impact и Honkai Star Rail</value>
  </data>
  <data name="LanguageSelectionSectionHeader.Text" xml:space="preserve">
    <value>Язык</value>
  </data>
  <data name="LanguageSelectorComboBox.Header" xml:space="preserve">
    <value>Выберите язык отображения:</value>
  </data>
  <data name="LanguageSelectorTitle.Text" xml:space="preserve">
    <value>Опции языка в данный момент ограничены. Работа над ними продолжается.</value>
  </data>
  <data name="ModsFolderSelector.Title" xml:space="preserve">
    <value>Папка модов</value>
  </data>
  <data name="ModUpdateCheckerCheckBox.Content" xml:space="preserve">
    <value>Автоматическая проверка модов</value>
  </data>
  <data name="ModUpdateCheckerDescription.Text" xml:space="preserve">
    <value>Mod Update Checker проверяет наличие обновлений модов при запуске и периодически в фоновом режиме.
При включении проверяет каждые 240 минут, однако проверяет только те моды, которые не проверялись по крайней мере 60 минут.
Ручная проверка обновлений всегда проверяет GameBanana напрямую.</value>
  </data>
  <data name="ModUpdateCheckerNextText.Text" xml:space="preserve">
    <value>Следующая проверка в:</value>
  </data>
  <data name="ModUpdateCheckerSectionHeader.Text" xml:space="preserve">
    <value>Проверка обновлений у модов</value>
  </data>
  <data name="StartElevatorButton.Content" xml:space="preserve">
    <value>Начать Процесс Синхронизации</value>
  </data>
  <data name="StartElevatorDialogDontShowContent" xml:space="preserve">
    <value>Не показывайте это снова</value>
  </data>
  <data name="StartElevatorDialogText" xml:space="preserve">
    <value>Нажмите кнопку Start, чтобы запустить процесс синхронизации. Синхронизация - это административный процесс, который используется для связи с 3DMigoto и игрой.

Пока синхронизация активна, вы можете нажать F10 в приложении, чтобы обновить активные моды в игре.

Включение и отключение модов также автоматически обновит работу 3DMigoto в игре. Процесс синхронизации должен автоматически завершиться после закрытия программы.

После нажатия кнопки Start появится запрос User Account Control (UAC) для разрешения от имени администратора.

(Для этого необходимо, чтобы игра и 3Dmigoto были запущены, при нажатии F10)</value>
  </data>
  <data name="StartElevatorDialogTitle" xml:space="preserve">
    <value>Запустить синхронизацию?</value>
  </data>
</root>